<?php

namespace App\Http\Controllers\Knowledge;

use App\Http\Controllers\Controller;
use App\Models\Quiz;
use App\Services\QuizStudentService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class StudentQuizController extends Controller
{
    protected QuizStudentService $quizService;

    public function __construct(QuizStudentService $quizService)
    {
        $this->quizService = $quizService;
    }

    /**
     * Display the student dashboard with quizzes to do and completed.
     */
    public function index()
    {
        $user = Auth::user();

        if ($user->isTeacher()) {
            return redirect()->route('knowledge.teacher_index');
        }

        return view('pages.knowledge.index', [
            'assignedQuizzes' => $this->quizService->getAssignedQuizzes($user),
            'completedQuizzes' => $this->quizService->getCompletedQuizzes($user),
            'selfQuizzes' => $this->quizService->getSelfGeneratedQuizzes($user),
        ]);
    }

    /**
     * Display the quiz answer form to the student.
     */
    public function answer(Quiz $quiz)
    {
        return view('pages.knowledge.quiz_answer', [
            'quizQuestions' => $quiz->questions,
            'subject' => $quiz->subject,
            'quizInfo' => [
                'created_at' => $quiz->created_at,
                'question_count' => $quiz->question_count,
            ],
            'action' => route('knowledge.quiz.submit', $quiz)
        ]);
    }

    /**
     * Handle the student's quiz submission and store their score.
     */
    public function submitAnswers(Request $request, Quiz $quiz)
    {
        $user = Auth::user();

        $answers = $request->input('answers', []);
        $score = $this->quizService->calculateScore($quiz, $answers);

        $cohort = $this->quizService->getCohortForQuiz($user, $quiz);
        if (!$cohort) {
            return redirect()->route('knowledge.index')
                ->with('error', 'Impossible de trouver la cohorte liée à ce QCM.');
        }

        if ($this->quizService->hasAlreadyAnswered($user, $quiz)) {
            return redirect()->route('knowledge.index')
                ->with('error', 'Vous avez déjà répondu à ce QCM.');
        }

        $this->quizService->storeStudentResult($user, $quiz, $score, $answers);

        return redirect()->route('knowledge.quiz.result', $quiz->id);
    }

    /**
     * Display the quiz result to the student.
     */
    public function result(Quiz $quiz)
    {
        $user = Auth::user();

        $bilan = $this->quizService->getStudentResult($user, $quiz);

        if (!$bilan || !$bilan->answers) {
            return redirect()->route('knowledge.index')
                ->with('error', 'Aucune réponse enregistrée pour ce QCM.');
        }

        return view('pages.knowledge.result', [
            'quiz' => $quiz->questions,
            'answers' => json_decode($bilan->answers, true),
            'score' => $bilan->score,
            'total' => $quiz->question_count,
        ]);
    }

    /**
     * Displays the quiz answer form for a temporary quiz generated by a student.
     *
     * Retrieves the temporary quiz and subject from the session.
     * If no quiz is found in the session, redirects back to the main quiz index page with an error.
     */
    public function showTempAnswerForm()
    {
        $quiz = session('temp_quiz');
        $subject = session('temp_subject');

        if (!$quiz) {
            return redirect()->route('knowledge.index')->with('error', 'Aucun QCM temporaire trouvé.');
        }

        return view('pages.knowledge.quiz_answer', [
            'quizQuestions' => $quiz,
            'subject' => $subject,
            'action' => route('knowledge.temp.submit')
        ]);
    }

    /**
     * Handles the submission of answers for a temporary quiz.
     *
     * Retrieves the temporary quiz from the session, calculates the score by comparing
     * submitted answers to the correct ones, and then displays the result.
     * If the session has expired or no quiz is found, redirects back with an error.
     */
    public function submitTempAnswers(Request $request)
    {
        $quiz = session('temp_quiz');

        if (!$quiz) {
            return redirect()->route('knowledge.index')->with('error', 'QCM expiré ou invalide.');
        }

        $answers = $request->input('answers', []);
        $score = 0;

        foreach ($quiz as $index => $question) {
            if (isset($answers[$index]) && $answers[$index] === $question['answer']) {
                $score++;
            }
        }

        return view('pages.knowledge.result', [
            'quiz' => $quiz,
            'answers' => $answers,
            'score' => $score,
            'total' => count($quiz),
        ]);
    }
}
